from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy import create_engine, Column, Integer, String, Boolean
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base


app = FastAPI()

# Define the SQLAlchemy database connection here for future ref
DATABASE_URL = "sqlite:///./todo.db"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

#connect the db
class Task(Base):
    __tablename__ = "tasks"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(String)
    completed = Column(Boolean, default=False)

# Create the database tables
Base.metadata.create_all(bind=engine)

# Create a function to get a database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@app.post("/tasks/", response_model=Task)
def create_task(task: Task, db=Depends(get_db)):
    db.add(task)
    db.commit()
    db.refresh(task)
    return task


@app.get("/tasks/", response_model=list[Task])
def read_tasks(skip: int = 0, limit: int = 10, db=Depends(get_db)):
    tasks = db.query(Task).offset(skip).limit(limit).all()
    return tasks

# Get  task 
@app.get("/tasks/{task_id}", response_model=Task)
def read_task(task_id: int, db=Depends(get_db)):
    task = db.query(Task).filter(Task.id == task_id).first()
    if task is None:
        raise HTTPException(status_code=404, detail="Task not found")
    return task

# Update  task
@app.put("/tasks/{task_id}", response_model=Task)
def update_task(task_id: int, updated_task: Task, db=Depends(get_db)):
    task = db.query(Task).filter(Task.id == task_id).first()
    if task is None:
        raise HTTPException(status_code=404, detail="Task not found")

    for key, value in updated_task.dict().items():
        setattr(task, key, value)

    db.commit()
    db.refresh(task)
    return task

# Delete 
@app.delete("/tasks/{task_id}", response_model=Task)
def delete_task(task_id: int, db=Depends(get_db)):
    task = db.query(Task).filter(Task.id == task_id).first()
    if task is None:
        raise HTTPException(status_code=404, detail="Task not found")

    db.delete(task)
    db.commit()
    return task

# Run the FastAPI application with Uvicorn
# You can start the application by running: uvicorn your_app_name:app --reload and you should be good to go lmk if changes should be made
